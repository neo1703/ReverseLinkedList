// Java implementation of the approach 
import java.util.*; 

class GFG 
{ 

// Structure of a node of the linked list 
static class node 
{ 
	Object data; 
	node next; 
}; 


static node newNode(Object d) 
{ 
	node newnode = new node(); 
	newnode.data = d; 
	newnode.next = null; 
	return newnode; 
}
static node reverse(node head, node prev) 
{ 

	// Base case 
	if (head == null) 
		return null; 

	node temp; 
	node curr; 
	curr = head; 

	// Reversing nodes until curr node's value 
	// turn odd or Linked list is fully traversed 
	while (curr != null && curr.data % 2 == 0) 
	{ 
		temp = curr.next; 
		curr.next = prev; 
		prev = curr; 
		curr = temp; 
	} 

	// If elements were reversed then head 
	// pointer needs to be changed 
	if (curr != head) 
	{ 
		head.next = curr; 

		// Recur for the remaining linked list 
		curr = reverse(curr, null); 
		return prev; 
	} 

	// Simply iterate over the odd value nodes 
	else
	{ 
		head.next = reverse(head.next, head); 
		return head; 
	} 
} 

static void printLinkedList(node head) 
{ 
	while (head != null) 
	{ 
		System.out.print(head.data + " "); 
		head = head.next; 
	} 
} 


public static void main(String[] args) 
{ 
	int arr[] = { 1, 2, 3, 3, 4, 6, 8, 5 }; 
	int n = arr.length; 

	node head = null; 
	node p = new node(); 

	// Constructing linked list 
	for (int i = 0; i < n; i++) 
	{ 
		if (head == null) 
		{ 
			p = newNode(arr[i]); 
			head = p; 
			continue; 
		} 
		p.next = newNode(arr[i]); 
		p = p.next; 
	} 

	// Head of the updated linked list 
	head = reverse(head, null); 

	// Printing the reversed linked list 
	printLinkedList(head); 
} 
} 
